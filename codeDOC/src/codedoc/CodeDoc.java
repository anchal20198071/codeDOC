/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codedoc;

import static codedoc.LoginWindow.soc;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import static java.util.stream.DoubleStream.builder;
import static java.util.stream.IntStream.builder;

/**
 *
 * @author Asmita Yadav
 */
public class CodeDoc extends javax.swing.JFrame {

    /**
     * Creates new form CodeDoc
     */
    int exit=0;
    int sec=0;
    public static String path=null;
    private static final String FILE_LOCATION1 ="Desktop\\winners\\codeDOC\\codeDOC\\arya.c";    
     private static final String FILE_LOCATION2 ="Desktop\\winners\\codeDOC\\codeDOC\\arya.py";
     private static final String FILE_LOCATION3 ="Desktop\\winners\\codeDOC\\codeDOC\\arya.cpp";
     
     private static final String FILE_LOCATION4 ="Desktop\\winners\\codeDOC\\codeDOC\\arya.java";
     Socket soc;
     PrintWriter out;
     private BufferedReader in;
    public CodeDoc() throws IOException {
        soc=LoginWindow.soc;
        out = new PrintWriter(soc.getOutputStream(), true);
        in=new BufferedReader(new InputStreamReader(soc.getInputStream()));
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        newDoc = new javax.swing.JButton();
        editDoc = new javax.swing.JButton();
        saveDoc = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        compiletextbox = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        sendMessage = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        languageSelector = new javax.swing.JComboBox<>();
        autoComplete = new javax.swing.JCheckBox();
        previousCode = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        fontSetting = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        customInput = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        getinput = new javax.swing.JTextArea();
        compileAndRun = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        getoutput = new javax.swing.JTextArea();
        timer = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        jTextField1.setBackground(new java.awt.Color(255, 255, 204));
        jTextField1.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jTextField1.setText("CodeDOC");
        jTextField1.setBorder(null);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        newDoc.setText("New");

        editDoc.setText("Edit");

        saveDoc.setText("Save");

        jButton1.setText("Share");

        jButton2.setText("Chat");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Audio Call");

        jButton5.setText("Video Call");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newDoc)
                .addGap(18, 18, 18)
                .addComponent(editDoc)
                .addGap(18, 18, 18)
                .addComponent(saveDoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newDoc)
                    .addComponent(editDoc)
                    .addComponent(saveDoc)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        compiletextbox.setColumns(20);
        compiletextbox.setRows(5);
        compiletextbox.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                compiletextboxCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(compiletextbox);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        sendMessage.setText("Send");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(sendMessage)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendMessage))))
        );

        jPanel3.setBackground(new java.awt.Color(212, 239, 242));

        languageSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C", "C++", "Java", "Python" }));

        autoComplete.setText("Autocomplete");

        previousCode.setText("Previous Code");

        reset.setText("Reset");

        fontSetting.setText("Font Setting");
        fontSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSettingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(languageSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(autoComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(previousCode)
                .addGap(18, 18, 18)
                .addComponent(reset)
                .addGap(18, 18, 18)
                .addComponent(fontSetting)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoComplete)
                    .addComponent(previousCode)
                    .addComponent(reset)
                    .addComponent(fontSetting))
                .addContainerGap())
        );

        customInput.setText("Custom Input");
        customInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customInputActionPerformed(evt);
            }
        });

        getinput.setColumns(20);
        getinput.setRows(5);
        jScrollPane1.setViewportView(getinput);

        compileAndRun.setText("Compile & Run");
        compileAndRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileAndRunActionPerformed(evt);
            }
        });

        getoutput.setColumns(20);
        getoutput.setRows(5);
        jScrollPane3.setViewportView(getoutput);

        timer.setText("Seconds");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(compileAndRun))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(compileAndRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customInput))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 279, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    
    /*//
     !!!!!!!!!!!!!!!!!text area shi krna hai
     public Color textColor;
     public void setTextFont(Font font) {
        textArea.setFont(font);  
        textArea.setForeground(textColor);
    }    
     
   //*/
    
    
// CUSTOM INPUT
    
    private void customInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customInputActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_customInputActionPerformed

// COMPILE AND RUN    
    private void compileAndRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileAndRunActionPerformed
                                      
        
        exit=0;
            String a = languageSelector.getSelectedItem().toString();
            //get the preffered language from user
            int gotsec=Integer.valueOf(timer.getText());
            
            Thread th7=new Thread(new Runnable() {
               @Override
               public void run() {
                  
                  sec=0;
                   while(sec<gotsec && exit==0)
        {
            try {
                Thread.sleep(1000);
                sec++;
                timer.setText(Integer.toString(sec));
            } catch (InterruptedException ex) {
                Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                   if(gotsec<=sec)
                   {
                       getoutput.setText("TLE");
                       return;
                   }
                          
               }
       });
             th7.start();
            if(a.equalsIgnoreCase("C")){
            try {
            String filename = "arya.c";
            FileWriter fileWriter=new FileWriter(filename);
            fileWriter.write(compiletextbox.getText());
            setTitle(filename);
            fileWriter.close();
            } catch (IOException e) {
                exit=1;
            System.out.println("file not found");
            }
            //created a file successfully in the folder where project is cloned
            boolean isWindows = System.getProperty("os.name")
  .toLowerCase().startsWith("windows");
            
             ProcessBuilder processBuilder = new ProcessBuilder();
             Process process=null;
           if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "gcc",FILE_LOCATION1);
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
               processBuilder.directory(new File(System.getProperty("user.home")));


                try {
                    process = processBuilder.start();
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        System.out.println(coutput);
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    if( process.getErrorStream().read() != -1 )
                    {
                        exit=1;
                        getoutput.setText("file cant be compiled " +process.getErrorStream());
  
                        return;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                 
            if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "a");
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
                try {
                    process = processBuilder.start();
                    OutputStream os=process.getOutputStream();
                    PrintStream ps = new PrintStream(os);//if we want to send some input
                    ps.println(getinput.getText());
                    ps.flush();
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        if(sec>=gotsec)
                        {
                            getoutput.setText("TLE");
                            return;
                        }
                        getoutput.setText(coutput);
                        System.out.println(coutput);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 exit=1;
            
        }
            if(a.equalsIgnoreCase("C++")){
            try {
            String filename = "arya.cpp";
            FileWriter fileWriter=new FileWriter(filename);
            fileWriter.write(compiletextbox.getText());
            setTitle(filename);
            fileWriter.close();
            } catch (IOException e) {
            System.out.println("file not found");
            }
            //created a file successfully in the folder where project is cloned
            boolean isWindows = System.getProperty("os.name")
  .toLowerCase().startsWith("windows");
            
             ProcessBuilder processBuilder = new ProcessBuilder();
             Process process=null;
           if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "g++",FILE_LOCATION3);
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
               processBuilder.directory(new File(System.getProperty("user.home")));


                try {
                    process = processBuilder.start();
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        System.out.println(coutput);
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    if( process.getErrorStream().read() != -1 )
                    {
                        exit=1;
                        getoutput.setText("file cant be compiled " +process.getErrorStream());
                        return;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                 
            if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "a");
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
                try {
                    process = processBuilder.start();
                    OutputStream os=process.getOutputStream();
                    PrintStream ps = new PrintStream(os);//if we want to send some input
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        getoutput.setText(coutput);
                        System.out.println(coutput);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            exit=1;
        }
            if(a.equalsIgnoreCase("java")){
            try {
            String filename = "arya.java";
            FileWriter fileWriter=new FileWriter(filename);
            fileWriter.write(compiletextbox.getText());
            setTitle(filename);
            fileWriter.close();
            } catch (IOException e) {
                exit=1;
                
            getoutput.setText("file not found");
            return;
            }
            //created a file successfully in the folder where project is cloned
            boolean isWindows = System.getProperty("os.name")
  .toLowerCase().startsWith("windows");
            
             ProcessBuilder processBuilder = new ProcessBuilder();
             Process process=null;
           if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "javac",FILE_LOCATION4);
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
               processBuilder.directory(new File(System.getProperty("user.home")));


                try {
                    process = processBuilder.start();
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        
                        System.out.println(coutput);
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    if( process.getErrorStream().read() != -1 )
                    {
                        exit=1;
                        getoutput.setText("file cant be compiled " +process.getErrorStream());
                        return;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                 
            if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "java","-cp",FILE_LOCATION4);
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
                try {
                    process = processBuilder.start();
                    OutputStream os=process.getOutputStream();
                    PrintStream ps = new PrintStream(os);//if we want to send some input
                    ps.println(getinput.getText());
                    ps.flush();
                    System.out.println("here");
                    
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    while((coutput=br.readLine())!=null)
                    {
                        if(sec>=gotsec)
                        {
                            getoutput.setText("TLE");
                         
                            return;
                        }
                        getoutput.setText(coutput);
                        System.out.println(coutput);
                        
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            exit=1;
        } 
    if(a.equalsIgnoreCase("python")){
            try {
            String filename = "arya.py";
            FileWriter fileWriter=new FileWriter(filename);
            fileWriter.write(compiletextbox.getText());
            setTitle(filename);
            fileWriter.close();
            } catch (IOException e) {
                exit=1;
            System.out.println("file not found");
            }
            //created a file successfully in the folder where project is cloned
            boolean isWindows = System.getProperty("os.name")
  .toLowerCase().startsWith("windows");
            
             ProcessBuilder processBuilder = new ProcessBuilder();
             Process process=null;
           if (isWindows) {
                   processBuilder.command("cmd.exe", "/c", "py",FILE_LOCATION2);
               } else {
                   processBuilder.command("sh", "-c", "ls");
               }
               processBuilder.directory(new File(System.getProperty("user.home")));


                try {
                    process = processBuilder.start();
                    OutputStream os=process.getOutputStream();
                     PrintStream ps = new PrintStream(os);//if we want to send some input
        
                    ps.println(getinput.getText());
                    ps.flush();
                    
                    System.out.println("here");
                    
                    BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));//getting the output
                    String coutput;
                    if(sec>=gotsec)
                        {
                            getoutput.setText("TLE");
                         
                            return;
                        }
                    while((coutput=br.readLine())!=null)
                    {
                        if(sec>=gotsec)
                        {
                            getoutput.setText("TLE");
                         
                            return;
                        }
                        getoutput.setText(coutput);
                        System.out.println(coutput);
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    if( process.getErrorStream().read() != -1 )
                    {
                        exit=1;
                        getoutput.setText("file cant be compiled " +process.getErrorStream());
                        return;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
                 //file is compile and runnable a file is created
                exit=1;
              
        }
    }//GEN-LAST:event_compileAndRunActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    
    //FONT SETTING
    private void fontSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSettingActionPerformed
        fontSettings  fS=new fontSettings(CodeDoc.this);
        fS.show();
    }//GEN-LAST:event_fontSettingActionPerformed

    private void compiletextboxCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_compiletextboxCaretUpdate
        // TODO add your handling code here:
        
    }//GEN-LAST:event_compiletextboxCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeDoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeDoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeDoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeDoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CodeDoc().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(CodeDoc.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoComplete;
    private javax.swing.JButton compileAndRun;
    private javax.swing.JTextArea compiletextbox;
    private javax.swing.JButton customInput;
    private javax.swing.JButton editDoc;
    private javax.swing.JButton fontSetting;
    private javax.swing.JTextArea getinput;
    private javax.swing.JTextArea getoutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> languageSelector;
    private javax.swing.JButton newDoc;
    private javax.swing.JButton previousCode;
    private javax.swing.JButton reset;
    private javax.swing.JButton saveDoc;
    private javax.swing.JButton sendMessage;
    private javax.swing.JTextField timer;
    // End of variables declaration//GEN-END:variables

    static class setVisible {

        public setVisible(boolean b) {
        }
    }
}
